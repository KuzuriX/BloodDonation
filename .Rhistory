} else {
exported$am1_8 <- factor(exported$am1_8,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am1_81.f <- factor(exported$am1_81,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am1_81 <- factor(exported$am1_81,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am1_82.f <- factor(exported$am1_82,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am1_82 <- factor(exported$am1_82,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am1_83.f <- factor(exported$am1_83,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am1_83 <- factor(exported$am1_83,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am1_84.f <- factor(exported$am1_84,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am1_84 <- factor(exported$am1_84,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am2_9.f <- factor(exported$am2_9,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am2_9 <- factor(exported$am2_9,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am2_0.f <- factor(exported$am2_0,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am2_0 <- factor(exported$am2_0,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am2_1.f <- factor(exported$am2_1,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am2_1 <- factor(exported$am2_1,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am2_2.f <- factor(exported$am2_2,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am2_2 <- factor(exported$am2_2,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am2_3.f <- factor(exported$am2_3,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am2_3 <- factor(exported$am2_3,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am2_4.f <- factor(exported$am2_4,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am2_4 <- factor(exported$am2_4,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am2_5.f <- factor(exported$am2_5,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am2_5 <- factor(exported$am2_5,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am2_6.f <- factor(exported$am2_6,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am2_6 <- factor(exported$am2_6,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am2_8.f <- factor(exported$am2_8,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am2_8 <- factor(exported$am2_8,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am2_81.f <- factor(exported$am2_81,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am2_81 <- factor(exported$am2_81,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am2_82.f <- factor(exported$am2_82,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am2_82 <- factor(exported$am2_82,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am3.f <- factor(exported$am3,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
} else {
exported$am3 <- factor(exported$am3,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
}
if( cspro.factor.create.new.variable ) {
exported$am4.f <- factor(exported$am4,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
} else {
exported$am4 <- factor(exported$am4,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
}
if( cspro.factor.create.new.variable ) {
exported$am5.f <- factor(exported$am5,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
} else {
exported$am5 <- factor(exported$am5,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
}
if( cspro.factor.create.new.variable ) {
exported$am6.f <- factor(exported$am6,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
} else {
exported$am6 <- factor(exported$am6,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
}
if( cspro.factor.create.new.variable ) {
exported$am7.f <- factor(exported$am7,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
} else {
exported$am7 <- factor(exported$am7,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
}
if( cspro.factor.create.new.variable ) {
exported$am8.f <- factor(exported$am8,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
} else {
exported$am8 <- factor(exported$am8,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
}
if( cspro.factor.create.new.variable ) {
exported$am9.f <- factor(exported$am9,levels = c(1,9,2),labels = c("Si","NS/NR","No"))
} else {
exported$am9 <- factor(exported$am9,levels = c(1,9,2),labels = c("Si","NS/NR","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am10.f <- factor(exported$am10,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
} else {
exported$am10 <- factor(exported$am10,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
}
if( cspro.factor.create.new.variable ) {
exported$am11.f <- factor(exported$am11,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
} else {
exported$am11 <- factor(exported$am11,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
}
if( cspro.factor.create.new.variable ) {
exported$am12.f <- factor(exported$am12,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
} else {
exported$am12 <- factor(exported$am12,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
}
if( cspro.factor.create.new.variable ) {
exported$am13.f <- factor(exported$am13,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
} else {
exported$am13 <- factor(exported$am13,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
}
if( cspro.factor.create.new.variable ) {
exported$am15.f <- factor(exported$am15,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
} else {
exported$am15 <- factor(exported$am15,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
}
if( cspro.factor.create.new.variable ) {
exported$am15_1.f <- factor(exported$am15_1,levels = c(1,2,3,4,5,9),labels = c("Cascadas","Marianelas","Gravilias","La Quebrada","La Loma","NS/NR"))
} else {
exported$am15_1 <- factor(exported$am15_1,levels = c(1,2,3,4,5,9),labels = c("Cascadas","Marianelas","Gravilias","La Quebrada","La Loma","NS/NR"))
}
if( cspro.factor.create.new.variable ) {
exported$am16_99.f <- factor(exported$am16_99,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am16_99 <- factor(exported$am16_99,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am16_1.f <- factor(exported$am16_1,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am16_1 <- factor(exported$am16_1,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am16_2.f <- factor(exported$am16_2,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am16_2 <- factor(exported$am16_2,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am16_3.f <- factor(exported$am16_3,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am16_3 <- factor(exported$am16_3,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am16_5.f <- factor(exported$am16_5,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am16_5 <- factor(exported$am16_5,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am16_6.f <- factor(exported$am16_6,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am16_6 <- factor(exported$am16_6,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am16_7.f <- factor(exported$am16_7,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am16_7 <- factor(exported$am16_7,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am16_8.f <- factor(exported$am16_8,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am16_8 <- factor(exported$am16_8,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am16_9.f <- factor(exported$am16_9,levels = c(1,2),labels = c("Si","No"))
} else {
exported$am16_9 <- factor(exported$am16_9,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$am17.f <- factor(exported$am17,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
} else {
exported$am17 <- factor(exported$am17,levels = c(1,2,9),labels = c("Si","No","NS/NR"))
}
if( cspro.factor.create.new.variable ) {
exported$am18.f <- factor(exported$am18,levels = c(9,1,2,3,4,8),labels = c("NS/NR","No le interesa","No tiene tiempo","Es obligacion de la CNE","No los considera Necesarios","Otro"))
} else {
exported$am18 <- factor(exported$am18,levels = c(9,1,2,3,4,8),labels = c("NS/NR","No le interesa","No tiene tiempo","Es obligacion de la CNE","No los considera Necesarios","Otro"))
}
if( cspro.factor.create.new.variable ) {
exported$am19.f <- factor(exported$am19,levels = c(1,2,3,4,5,8,6),labels = c("Television","Periodicos","Internet","Radio","Redes Sociales","Otro","Telefono"))
} else {
exported$am19 <- factor(exported$am19,levels = c(1,2,3,4,5,8,6),labels = c("Television","Periodicos","Internet","Radio","Redes Sociales","Otro","Telefono"))
}
if( cspro.factor.create.new.variable ) {
exported$am20.f <- factor(exported$am20,levels = c(1,2,3,4,5,9),labels = c("Muy buena","Buena","Regular","Mala","Muy Mala","NS/NR"))
} else {
exported$am20 <- factor(exported$am20,levels = c(1,2,3,4,5,9),labels = c("Muy buena","Buena","Regular","Mala","Muy Mala","NS/NR"))
}
if( cspro.factor.create.new.variable ) {
exported$ih1.f <- factor(exported$ih1,levels = c(1,2,3,4,9),labels = c("No, tienen grandes dificultades","No, tienen dificultades","Si, les alcanza justo sin gran dificultad","si, les alcanza bien pueden ahorrar","NS/NR"))
} else {
exported$ih1 <- factor(exported$ih1,levels = c(1,2,3,4,9),labels = c("No, tienen grandes dificultades","No, tienen dificultades","Si, les alcanza justo sin gran dificultad","si, les alcanza bien pueden ahorrar","NS/NR"))
}
if( cspro.factor.create.new.variable ) {
exported$a11.f <- factor(exported$a11,levels = c(1,2),labels = c("Si","No"))
} else {
exported$a11 <- factor(exported$a11,levels = c(1,2),labels = c("Si","No"))
}
if( cspro.factor.create.new.variable ) {
exported$a12.f <- factor(exported$a12,levels = c(1,2,3),labels = c("Personal","Telefonica","Ambas"))
} else {
exported$a12 <- factor(exported$a12,levels = c(1,2,3),labels = c("Personal","Telefonica","Ambas"))
}
}
rm(cspro.factor.type)
rm(cspro.factor.create.new.variable)
View(exported)
base2<-exported
base<-rbind(base1,base2)
write.csv(base, file = "/Users/matilde/OneDrive/Documentos/UCR/TCU/Entrada de datos Censo Cascadas y Marianelas/base.csv")
version
version
qnorm(.8328 )
?qnorm
pnorm(.8328 )
qnorm(.8328, lower.tail = T)
qnorm(.8328, lower.tail = F)
qnorm(.5 )
pnorm(-1.05)
install.packages("lavaan")
install.packages("lavan")
install.packages("lavaan")
install.packages("ltm")
install.packages("eRm")
install.packages("semPlot")
base<-read.table('/Users/matilde/Downloads/modelo10.txt')
View(base)
library(lavaan)
library(semTools)
library(semPlot)
install.packages("OpenMx")
prf.items<-'T1=~X1+X2+X3+X4+X5
T2=~X6+X7+X8+X9
'
'
install.packages("semPlot")
install.packages("semPlot")
library(semPlot)
library(OpenMx)
mod1<-'T1=~X1+X2+X3+X4+X5
T2=~X6+X7+X8+X9
'
fit.mod1<-cfa(mod1, data=base)
semPaths(fit.mod1,"path","std",intercepts=F,exoVar=F,curvePivot=T)
??semPaths
library(semPlot)
install.packages("OpenMx")
summary(fit, fit.measures=T, standarized=T, rsq=T)
semPaths(fit.mod1,"path","std",intercepts=F,exoVar=F,curvePivot=T)
library(semPlot)
summary(fit.mod1, fit.measures=T, standarized=T, rsq=T)
summary(fit.mod1, fit.measures=T, standardized=T, rsq=T)
mod3<-'T1=~X1+X2
T2=~+X3+X4
T3=~X5+X6
T4=~X7+X8
T5=~X9+X10
'
fit.mod3<-cfa(mod3, data=base)
mod3<-'T1=~X1+X2
T2=~+X3+X4
T3=~X5+X6
T4=~X7+X8
T5=~X9
'
fit.mod3<-cfa(mod3, data=base)
semPaths(fit.mod3,"path","std",intercepts=F,exoVar=F,curvePivot=T)
summary(fit.mod3, fit.measures=T, standarized=T, rsq=T)
summary(fit.mod3, fit.measures=T, standardized=T, rsq=T)
d4<-'T1=~X1+X2+X3
T2=~X4+X5+X6
T3=~X7+X8+X9
'
fit.mod4<-cfa(mod4, data=base)
semPaths(fit.mod4,"path","std",intercepts=F,exoVar=F,curvePivot=T)
summary(fit.mod4, fit.measures=T, standardized=T, rsq=T)
mod4<-'T1=~X1+X2+X3
T2=~X4+X5+X6
T3=~X7+X8+X9
'
fit.mod4<-cfa(mod4, data=base)
semPaths(fit.mod4,"path","std",intercepts=F,exoVar=F,curvePivot=T)
summary(fit.mod4, fit.measures=T, standardized=T, rsq=T)
mod4<-'T1=~X1+X2
T2=~X3+X4
T3=~X5+X6
T4=~X7+X8+X9
'
fit.mod4<-cfa(mod4, data=base)
semPaths(fit.mod4,"path","std",intercepts=F,exoVar=F,curvePivot=T)
summary(fit.mod4, fit.measures=T, standardized=T, rsq=T)
bernoulli=matrix(rbinom(200000, size=1, prob=0.5), nrow=20, byrow=T)
View(bernoulli)
b=data.frame(bernoulli)
View(b)
media=rep(0,10000)
te=rep(1,10000)
result=rep(0,10000)
dim(b)
b[1:20,i]
b[1:20,1]
t.test(b[1:20,1], mu=0.5)
t.test(b[1:20,1], mu=0.5)$statistic
for (i in 1:10000) {
if(sd(b[1:20,i])==0) result=NA else result=t.test(b[1:20,i], mu=0.5)
if(sd(b[1:20,i])==0) media[i]=NA else media[i]=mean(b[1:20,i])
if(sd(b[1:20,i])==0) te[i]=NA else te[i]=result$statistic
}
hist(media)
qqnorm(media)
qqline(media)
qqplot(te, rt(20, df=19))
qqline(te)
summary(media)
summary(te)
hist(te)
ps=rep(0,10000)
for (i in 1:10000) {
if(sd(b[1:20,i])==0) result=NA else result=t.test(b[1:20,i], mu=0.5)
if(sd(b[1:20,i])==0) media[i]=NA else media[i]=mean(b[1:20,i])
if(sd(b[1:20,i])==0) te[i]=NA else te[i]=result$statistic
if(sd(b[1:20,i])==0) te[i]=NA else ps[i]=result$p
}
t.test(b[1:20,1], mu=0.5)$pval
fff<-t.test(b[1:20,1], mu=0.5)
fff$p.value
for (i in 1:10000) {
if(sd(b[1:20,i])==0) result=NA else result=t.test(b[1:20,i], mu=0.5)
if(sd(b[1:20,i])==0) media[i]=NA else media[i]=mean(b[1:20,i])
if(sd(b[1:20,i])==0) te[i]=NA else te[i]=result$statistic
if(sd(b[1:20,i])==0) te[i]=NA else ps[i]=result$p.value
}
hist(ps)
summary(ps)
(exp(-8.6+0.002))/(exp(-8.6+100.002))
(exp(-8.6+1.002))/(exp(-8.6+100.002))
cat("\014")
rm(list=ls())
library(rstudioapi)
library(ggplot2)
library(pscl)
library(mvoutlier)
library(MVN)
library(caret)
library(corrplot)
library(LiblineaR)
library(RWeka)
install.packages("devtools")
install.packages("rJava")
library(RWeka)
sudo R CMD javareconf
install.packages("rJava",type='source')
library(RWeka)
install.packages("RWeka")
cat("\014")
rm(list=ls())
library(rstudioapi)
library(ggplot2)
library(pscl)
library(mvoutlier)
library(MVN)
library(caret)
library(corrplot)
library(LiblineaR)
library(RWeka)
dpath = rstudioapi::getActiveDocumentContext()$path
path = sub(basename(path), '', path)
setwd(path)
blood = read.csv(file = file.choose(), stringsAsFactors = F)
dpath = rstudioapi::getActiveDocumentContext()$path
path = sub(basename(path), '', path)
path = rstudioapi::getActiveDocumentContext()$path
path = sub(basename(path), '', path)
setwd(path)
blood = read.csv(file = file.choose(), stringsAsFactors = F)
blood = blood[,-1]
names(blood) = c("MonthsLastDonation", "NoDonations", "TotalVolume", "MonthsFirstDonation", "MadeDonation")
blood = blood[,-3]
set.seed(123)
trainIndex <- createDataPartition(blood$MadeDonation, p = .8,
list = FALSE,
times = 1)
bloodTrain <- blood[trainIndex,]
bloodTest <- blood[-trainIndex,]
mod <- glm(MadeDonation~MonthsLastDonation+NoDonations+MonthsFirstDonation,
family=binomial(link=logit), data = bloodTrain)
cooksd <- cooks.distance(mod)
influential <- as.numeric(names(cooksd)[(cooksd > 4*mean(cooksd, na.rm=T))])
bloodTrain <- bloodTrain[-influential,]
preProcValues <- preProcess(bloodTrain[-4], method = c("center", "scale"))
trainTransformed <- predict(preProcValues, bloodTrain)
testTransformed <- predict(preProcValues, bloodTest)
glm1 = glm(MadeDonation~MonthsLastDonation+NoDonations+MonthsFirstDonation, family=binomial(link=logit), data = trainTransformed)
summary(glm1)
preds<- ifelse(predict(glm1, newdata = testTransformed)>.5,1,0)
confusionMatrix(data = preds, reference = testTransformed$MadeDonation, positive = '1')$overall[1]
X<- trainTransformed[,1:3]
X2<- testTransformed[,1:3]
X = polynomial(X,3)
polynomial <- function(X, p){
new_data=c()
temp1 <- X
temp2 <- cbind(X^2, do.call(cbind,combn(colnames(X), 2,
FUN= function(x) list(X[x[1]]*X[x[2]]))))
colnames(temp2)[-(seq_len(ncol(X)))] <-  combn(colnames(X), 2,
FUN = paste, collapse=":")
new_data <- cbind(temp1,  temp2[, !names(temp2) %in% names(X)])
for(i in 2:p){
temp1= as.data.frame(X^p)
colnames(temp1)<-paste0(colnames(temp1), paste0("^",i))
temp2 <- cbind(temp1^2, do.call(cbind,combn(colnames(temp1), 2,
FUN= function(x) list(temp1[x[1]]*temp1[x[2]]))))
colnames(temp2)[-(seq_len(ncol(temp1)))] <-  combn(colnames(temp1), 2,
FUN = paste, collapse=":")
new_data=cbind(new_data,temp1, temp2[, !names(temp2) %in% names(temp1)])
}
#colnames(new_data)=paste0("V",1:ncol(new_data))
return(as.data.frame(new_data))
}
X<- trainTransformed[,1:3]
X2<- testTransformed[,1:3]
X = polynomial(X,3)
X2 = polynomial(X2,3)
bestCost=1
bestType=6
modLin=LiblineaR(data=X,target=Y,type=bestType,cost=bestCost,bias=1,verbose=FALSE)
bestCost=1
bestType=6
modLin=LiblineaR(data=X,target=Y,type=bestType,cost=bestCost,bias=1,verbose=FALSE)
Y <- trainTransformed$MadeDonation
Y2<- testTransformed$MadeDonation
modLin=LiblineaR(data=X,target=Y,type=bestType,cost=bestCost,bias=1,verbose=FALSE)
pr=FALSE
if(bestType==0 || bestType==7) pr=TRUE
if(bestType==0 || bestType==7) pr=TRUE
p=predict(modLin,X2,proba=pr,decisionValues=TRUE)
res=table(p$predictions,Y2)
print(res)
confusionMatrix(data = p$predictions, reference = Y2, positive = '1')$overall[1]
library(partykit)
install.packages("party")
install.packages("partykit")
?trainControl
fitControl <- trainControl(method = "cv", number = 2)
View(trainTransformed)
rpartFit <- train(MadeDonation ~., data=trainTransformed, method = "rpart", trControl = fitControl)
names(trainTransformed)
typeof(trainTransformed$MadeDonation)
rpartFit <- train(as.character(MadeDonation) ~., data=trainTransformed, method = "rpart", trControl = fitControl)
probsTest <- predict(rpartFit, testTransformed, type = "prob")
pred      <- factor( ifelse(probsTest[, "1"] > 0.5, "1", "0") )
probsTest <- predict(rpartFit, testTransformed, type = "prob")
View(probsTest)
pred      <- factor( ifelse(probsTest[, "1"] > 0.5, "1", "0") )
table
table(pred)
confusionMatrix(pred, testTransformed$MadeDonation)
rpart.plot(rpartFit$finalModel)
library(rpart.plot)
install.packages("rpart.plot")
rpart.plot(rpartFit$finalModel)
library(rpart.plot)
rpart.plot(rpartFit$finalModel)
rpartFit <- train(as.character(MadeDonation) ~., data=bloodTrain, method = "rpart", trControl = fitControl)
probsTest <- predict(rpartFit, bloodTest, type = "prob")
pred      <- factor( ifelse(probsTest[, "1"] > 0.5, "1", "0") )
confusionMatrix(pred, bloodTest$MadeDonation)
rpart.plot(rpartFit$finalModel)
blood.rf=randomForest(MadeDonation ~ . , data = blood , subset = bloodTrain)
install.packages("randomForest")
library(randomForest)
blood.rf=randomForest(MadeDonation ~ . , data = blood , subset = bloodTrain)
blood.rf=randomForest(as.character(MadeDonation) ~ . , data = blood , subset = bloodTrain)
blood.rf=randomForest(as.character(MadeDonation) ~ . , data = bloodTrain)
blood.rf=randomForest(MadeDonation~ . , data = bloodTrain)
bloodTrain$MadeDonation<-as.character(bloodTrain$MadeDonation)
blood.rf=randomForest(as.character(MadeDonation) ~ . , data = bloodTrain)
blood.rf=randomForest(MadeDonation ~ . , data = bloodTrain)
blood.rf
plot(blood.rf)
blood$MadeDonation<-as.character(blood$MadeDonation)
blood.rf=randomForest(MadeDonation ~ . , data = blood, subset = bloodTrain)
blood.rf=randomForest(MadeDonation ~ . , data = bloodTrain)
blood.rf
plot(blood.rf)
install.packages("rattle")
library(rattle)
install.packages("rattle")
install.packages("RGtk2")
install.packages("rattle")
install.packages("RGtk2")
install.packages("RGtk2", depen=T, type="source")
